#!/bin/bash

# レポートハブに同期するスクリプト（GitHub CLI使用版・強制上書き対応）

set -e

# 必要な環境変数をチェック
: ${GITHUB_TOKEN:?}
: ${REPORT_HUB_REPO:?}
: ${TARGET_DIR:?}
: ${REPO_NAME:?}
: ${DATE:?}
: ${WEEK_NUMBER:?}

# プルリクエストフロー設定（デフォルト値）
CREATE_PR=${CREATE_PR:-true}
AUTO_APPROVE=${AUTO_APPROVE:-false}
AUTO_MERGE=${AUTO_MERGE:-false}

# デバッグ用：環境変数を表示
echo "🔍 Environment Variables:"
echo "  CREATE_PR: $CREATE_PR"
echo "  AUTO_APPROVE: $AUTO_APPROVE"
echo "  AUTO_MERGE: $AUTO_MERGE"

# daily-report-hubは既にクローン済み

# README.mdをコピー
cp README.md "$TARGET_DIR/" 2>/dev/null || echo "# $REPO_NAME" > "$TARGET_DIR/README.md"

# 当日のアクティビティファイルをコピー（全て.mdファイル）
cp daily_commits.md "$TARGET_DIR/"
cp daily_cumulative_diff.md "$TARGET_DIR/"
cp daily_diff_stats.md "$TARGET_DIR/"
cp daily_code_diff.md "$TARGET_DIR/"
cp latest_diff.md "$TARGET_DIR/"
cp latest_code_diff.md "$TARGET_DIR/"
cp daily_summary.md "$TARGET_DIR/"

# 詳細メタデータを作成
COMMIT_COUNT=$(wc -l < daily_commits_raw.txt)
FILES_CHANGED=$(grep -c '^' daily_cumulative_diff_raw.txt 2>/dev/null || echo "0")

cat > "$TARGET_DIR/metadata.json" << EOF
{
  "repository": "$GITHUB_REPOSITORY",
  "date": "$DATE",
  "week_folder": "$WEEK_FOLDER",
  "week_number": $WEEK_NUMBER,
  "week_start_date": "$WEEK_START_DATE",
  "week_end_date": "$WEEK_END_DATE",
  "branch": "$GITHUB_REF_NAME",
  "latest_commit_sha": "$GITHUB_SHA",
  "sync_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "workflow_run": "$GITHUB_RUN_ID",
  "daily_commit_count": $COMMIT_COUNT,
  "daily_files_changed": $FILES_CHANGED,
  "has_activity": $([ $COMMIT_COUNT -gt 0 ] && echo "true" || echo "false"),
  "pr_flow": {
    "create_pr": $CREATE_PR,
    "auto_approve": $AUTO_APPROVE,
    "auto_merge": $AUTO_MERGE
  },
  "files": {
    "readme": "README.md",
    "summary": "daily_summary.md",
    "commits": "daily_commits.md",
    "file_changes": "daily_cumulative_diff.md",
    "stats": "daily_diff_stats.md",
    "code_diff": "daily_code_diff.md",
    "latest_diff": "latest_diff.md",
    "latest_code_diff": "latest_code_diff.md"
  }
}
EOF

# プルリクエストフローまたは直接プッシュ
cd daily-report-hub

# 最新のmainブランチを取得
git fetch origin main
git checkout main
git pull origin main

# 変更をステージング
git add .

# ステージされた変更をチェック（リセット前に）
if git diff --staged --quiet; then
  echo "No changes to commit"
  exit 0
fi

COMMIT_MESSAGE="📊 Weekly sync: $REPO_NAME ($DATE) - Week $WEEK_NUMBER - $COMMIT_COUNT commits"

if [ "$CREATE_PR" = "true" ]; then
  # 既存の同名PRブランチを削除（安全に）
  BRANCH_NAME="sync/$REPO_NAME-$DATE"
  
  # ローカルブランチがあれば削除
  git branch -D "$BRANCH_NAME" 2>/dev/null || true
  
  # リモートブランチがあれば削除
  git push origin --delete "$BRANCH_NAME" 2>/dev/null || true
  
  echo "🔀 Creating pull request flow with branch: $BRANCH_NAME"
  
  # 新しいブランチを作成してチェックアウト
  git checkout -b "$BRANCH_NAME"
  
  # コミット作成者を設定
  git config user.name "Yukihiko Kondo"
  git config user.email "yukihiko.fuyuki@example.com"
  
  # コミットして強制プッシュ
  git commit -m "$COMMIT_MESSAGE"
  git push origin "$BRANCH_NAME"
  
  # 既存のPRをチェックして閉じる
  echo "🔍 Checking for existing pull requests..."
  EXISTING_PRS=$(gh pr list --repo "$REPORT_HUB_REPO" --author "@me" --state open --json number,headRefName --jq '.[] | select(.headRefName | startswith("sync/'$REPO_NAME'")) | .number' 2>/dev/null || echo "")
  
  if [ -n "$EXISTING_PRS" ]; then
    echo "🗑️ Closing existing PRs for this repo..."
    echo "$EXISTING_PRS" | while read pr_number; do
      if [ -n "$pr_number" ]; then
        gh pr close "$pr_number" --repo "$REPORT_HUB_REPO" --comment "Superseded by new daily sync" 2>/dev/null || true
      fi
    done
  fi
  
  # GitHub CLIでプルリクエストを作成
  PR_BODY="## 📊 Daily Report Sync

**Repository:** \`$GITHUB_REPOSITORY\`
**Date:** $DATE
**Week:** $WEEK_NUMBER ($WEEK_START_DATE to $WEEK_END_DATE)

### 📈 Activity Summary
- **Commits:** $COMMIT_COUNT
- **Files Changed:** $FILES_CHANGED
- **Sync Time:** $(date '+%Y-%m-%d %H:%M:%S')

### 📋 Generated Files
- Daily summary report
- Commit details
- File changes
- Code differences
- Statistics

### ⚙️ Automation Settings
- **Auto Approve:** $AUTO_APPROVE
- **Auto Merge:** $AUTO_MERGE

---
*Auto-generated by GitHub Actions - Force overwrite enabled*"

  echo "📝 Creating pull request with GitHub CLI..."
  
  # GitHub CLIでプルリクエストを作成
  PR_URL=$(gh pr create \
    --title "$COMMIT_MESSAGE" \
    --body "$PR_BODY" \
    --base main \
    --head "$BRANCH_NAME" \
    --repo "$REPORT_HUB_REPO" 2>/dev/null || echo "")
  
  if [ -n "$PR_URL" ]; then
    echo "✅ Pull request created: $PR_URL"
    
    # 自動承認が有効な場合（自分のPRは承認できないので注意）
    if [ "$AUTO_APPROVE" = "true" ]; then
      echo "👍 Auto-approving pull request..."
      if gh pr review "$PR_URL" --approve --body "✅ Auto-approved by GitHub Actions" --repo "$REPORT_HUB_REPO" 2>/dev/null; then
        echo "✅ Pull request approved"
      else
        echo "⚠️ Cannot approve own pull request. Manual approval required."
        AUTO_MERGE="false"  # 承認できない場合は自動マージも無効にする
      fi
    fi
    
    # 自動マージが有効な場合
    if [ "$AUTO_MERGE" = "true" ]; then
      echo "🔀 Auto-merging pull request..."
      sleep 3  # APIの反映を待つ
      
      if gh pr merge "$PR_URL" --squash --delete-branch --repo "$REPORT_HUB_REPO" 2>/dev/null; then
        echo "✅ Pull request merged and branch deleted successfully"
      else
        echo "⚠️ Failed to auto-merge. Manual merge required."
        echo "PR URL: $PR_URL"
      fi
    else
      echo "📋 Pull request created and ready for manual review: $PR_URL"
    fi
  else
    echo "❌ Failed to create pull request with GitHub CLI. Falling back to direct push."
    git checkout main
    git merge "$BRANCH_NAME" --strategy-option=theirs  # コンフリクト時は新しい内容を優先
    git push origin main
    git branch -d "$BRANCH_NAME"
    git push origin --delete "$BRANCH_NAME" 2>/dev/null || true
  fi
else
  # 直接プッシュフロー
  echo "⚡ Direct push mode"
  git commit -m "$COMMIT_MESSAGE"
  git push origin main
  echo "✅ Successfully synced to report hub via direct push!"
fi
